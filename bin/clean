#!/bin/bash
set -euo pipefail

# -- APPS ----------------------------------------------------------------------

echo "Closing apps"

# foregroundAppsString=$(osascript -e 'tell application "System Events" to get name of (processes where background only is false)')

# IFS=',' read -r -a foregroundApps <<<"$foregroundAppsString"

# for foregroundApp in "${foregroundApps[@]}"; do
# 	appName=$(echo "$foregroundApp" | sed 's/^ *//g')
# 	if [[ ! "$appName" == "Finder" && ! "$appName" == "iTerm2" ]]; then
# 		osascript -e 'quit app "'"$appName"'"'
# 	fi
# done


# -- PROCESSES -----------------------------------------------------------------

echo "Quitting processes"
tmux kill-server || true
killall node || true


# -- DOTFILES ------------------------------------------------------------------

echo "Pulling latest dotfiles and shell scripts"

# cd "$HOME/repos/dotfiles"
# git pull


# -- HOMEBREW CLEANUP ----------------------------------------------------------

echo "Removing homebrew artifacts"
# brew cleanup
# brew prune


# -- macOS ARTIFACTS -----------------------------------------------------------

echo "Removing OS artifacts"
find "$HOME/repos" -name '.DS_Store' -delete


echo "Removing merged local branches in each git repo"

deep-git-prune() {
	IFS=$'\n\t'

	set +e
	LOCAL_BRANCHES=$(git branch --merged master | grep -v -e 'master' -e '\*' | tr -d ' ')
	set -e

	if [[ -n "$LOCAL_BRANCHES" ]]; then
		for BRANCH in $LOCAL_BRANCHES; do
			git branch -d "$BRANCH"
		done
	fi
}

cd "$HOME/repos"
for i in */.git; do (
  echo $i
  cd $i/..
  deep-git-prune
); done

# -- GIT-DELETE-SQUASHED -------------------------------------------------------

echo "Removing merged local branches in each git repo"

cd "$HOME/repos"
find . -name .git -type d -execdir git-delete-squashed --dry-run ';'


# -- REPO STATES ---------------------------------------------------------------

echo "Checking the status of each git repo"
deep-git-status() {
  cd "${HOME}/repos"
  # find . -path "*/.git" -maxdepth 2 -print -execdir git status ";"
  find . -name .git -type d -execdir git status -v ';'
}

output=$(deep-git-status | grep \
  -e "Untracked files:" \
  -e "Changes not staged for commit:" \
  -e "Changes to be committed:" \
  -e "Your branch is ahead" \
)

if [ -z "$output" ]; then
  echo "All git repos are clean"
else
  echo "Dirty git repos were found"
  deep-git-status
fi

