[include]

  # Use custom `.gitconfig` for username / github token / etc.
  path = ~/.gitconfig.local

[core]

  # Use Neovim
  editor = nvim

  # Use custom `.gitignore`
  excludesfile = ~/.gitignore.global

  # Treat spaces before tabs and all kinds of trailing whitespace as an error
  # [default] trailing-space: looks for spaces at the end of a line
  # [default] space-before-tab: looks for spaces before tabs at the beginning of a line
  whitespace = space-before-tab,-indent-with-non-tab,trailing-space

  # Make `git rebase` safer on macOS
  # More info: <http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/>
  trustctime = false

  # Speed up commands involving untracked files such as `git status`.
  # https://git-scm.com/docs/git-update-index#_untracked_cache
  untrackedCache = true

[apply]

  # Detect whitespace errors when applying a patch
  whitespace = fix

[alias]

  s = status --branch --short
  st = status
  ci = commit
  cm = commit -m
  cp = cherry-pick
  df = diff
  patch = add --patch
  unstage = reset HEAD --
  unstage-patch = reset HEAD --patch
  follow = log --follow -p

  # Commit all changes
  ca = !git add -A && git commit -av

  # Clone a repository including all submodules
  c = clone --recursive

  # James Brown version control!
  up = push
  down = pull

  # Branch related aliases
  br = branch
  cd = checkout
  co = checkout -B
  com = checkout master
  cod = checkout develop

  # Syncing related aliases
  pur = pull --rebase
  prune = fetch --prune

  # Pull in remote changes for the current repository and all its submodules
  p = !"git pull; git submodule foreach git pull origin master"

  # Rebase related aliases
  ri = rebase -i
  rb = "!sh -c \"git rebase -i HEAD~$1\" -"
  rc = rebase --continue
  ra = rebase --abort
  rs = rebase --skip
  rod = rebase origin/develop
  rom = rebase origin/master

  # Stash related aliases
  poop = stash pop
  wip = commit -m "WIP" -n

  # Push related aliases
  pom = push origin master
  pod = push origin develop
  force = push --force-with-lease
  fam = "!f() { git add . && git amend && git force; }; f"

  # Mistake related aliases
  abort = checkout -- .
  nope = checkout -- .
  wait = reset HEAD

  # Undo the last commit, but preserve the staging area
  undo = reset --soft HEAD^

  # Sneak changes into your previous commit
  amend = commit --amend --no-edit
  sneak = commit -a --amend --no-edit

  # Log related aliases
  lg = log -n 20 --abbrev-commit --graph --decorate --pretty=format:\"%C(auto)%h%C(auto)%d %C(auto)%s -%C(yellow) %cd\" --date=human
  lg2 = log --pretty=oneline -n 20 --abbrev-commit --graph --decorate

  # See everything everyone has done recently
  overview = log --all --oneline --no-merges

  # See today’s work
  today = log --since=\"00:00:00\" --all --no-merges --oneline --author=mikeschenkel@gmail.com

  # Show detailed logs
  graph = log --graph --decorate --stat --date=iso --all

  # See everything I have done recently
  recap = log --oneline --no-merges --author=mikeschenkel@gmail.com

  # Show very last commit
  last = log --oneline -1

  # Show number of commits from all authors.
  stats = shortlog -sn --all --no-merges

  # Changelog style
  changelog = "!sh -c \"git log --oneline --no-merges $1..HEAD\" -"

  # Show verbose output about tags, branches or remotes
  tags = tag -l
  branches = branch -a
  remotes = remote -v

  # Empty line between results from different files.
  find = "!git grep --break -C1"

  # See which commits are on your local branch that aren’t on the remote
  local = "! git log --oneline --no-merges origin/$(git rev-parse --abbrev-ref HEAD).."

  # See which commits are on the remote that aren’t on your local branch
  upstream = "! git fetch && git log --oneline --no-merges ..origin/$(git rev-parse --abbrev-ref HEAD)"

  # Nicer diffs for prose
  wdiff = diff --word-diff

  # Make it possible to diff minified code (eww…)
  mindiff = diff -w --word-diff-regex=. --color-words -U0

[log]

  # Better date formats in logs
  date = rfc

[http]

  sslBackend = openssl

[help]

  # Automatically correct and execute mistyped commands
  autocorrect = 1

[pager]

  diff = diff-so-fancy | less --tabs=1,5 -RFX
  show = diff-so-fancy | less --tabs=1,5 -RFX

[color]

  ui = always

[color "diff"]

  meta = yellow bold
  commit = green bold
  frag = magenta bold
  old = red bold
  new = green bold
  whitespace = red reverse
  newMoved = cyan
  oldMoved = blue

[color "diff-highlight"]

  oldNormal = red bold
  oldHighlight = "red bold 52"
  newNormal = "green bold"
  newHighlight = "green bold 22"

[color "branch"]

  current = yellow reverse
  local = yellow
  remote = green

[color "status"]

  added = yellow
  changed = green
  untracked = cyan

[status]

  # Sometimes a newly-added folder, since it's only one line in git status, can slip under the radar.
  # https://git-scm.com/docs/git-config#git-config-statusshowUntrackedFiles
  showUntrackedFiles = all

# [commit]

  # template = ~/.git-commit-template

  # "other people can trust that the changes you've made really were made by you"
  # https://help.github.com/articles/about-gpg/
  # https://git-scm.com/docs/git-config#git-config-commitgpgSign
  # gpgSign = true

[merge]

  tool = opendiff

[push]

  # "push the current branch back to the branch whose changes are usually integrated into the current branch"
  # "refuse to push if the upstream branch’s name is different from the local one"
  # https://git-scm.com/docs/git-config#git-config-pushdefault
  default = simple

  # Because I get sick of telling git to do it manually
  # https://git-scm.com/docs/git-config#git-config-pushfollowTags
  followTags = true

[fetch]

  prune = true

[diff]

  # Detect copies as well as renames
  renames = copies

[transfer]

  # To combat repository corruption!
  # Note: this global option applies during receive and transmit
  # https://git-scm.com/docs/git-config#git-config-transferfsckObjects
  # via https://groups.google.com/forum/#!topic/binary-transparency/f-BI4o8HZW0
  fsckobjects = true

[filter "lfs"]

  clean = git-lfs clean %f
  smudge = git-lfs smudge %f
  required = true

# URL shorthands

[url "git@github.com:"]

  insteadOf = "gh:"
  pushInsteadOf = "github:"
  pushInsteadOf = "git://github.com/"

[url "git://github.com/"]

  insteadOf = "github:"

[url "git@gist.github.com:"]

  insteadOf = "gst:"
  pushInsteadOf = "gist:"
  pushInsteadOf = "git://gist.github.com/"

[url "git://gist.github.com/"]

  insteadOf = "gist:"
