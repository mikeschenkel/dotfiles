"        _
" __   _(_)_ __ ___  _ __ ___
" \ \ / | | '_ ` _ \| '__/ __|
"  \ V /| | | | | | | | | (__
"   \_/ |_|_| |_| |_|_|  \___|

" ==============================================================================
" PLUGINS
" ==============================================================================

" Conditional activation
function! Cond(cond, ...)
  let opts = get(a:000, 0, {})
  return a:cond ? opts : extend(opts, { 'on': [], 'for': [] })
endfunction

call plug#begin()

" -- FILE / BUFFER MANAGEMENT --------------------------------------------------

" Command-line fuzzy finder
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'

" EditorConfig plugin for Vim
Plug 'editorconfig/editorconfig-vim'

" Helpers for UNIX
Plug 'tpope/vim-eunuch'

" Pairs of handy bracket mappings
Plug 'tpope/vim-unimpaired'

" Easily search for, substitute, and abbreviate multiple variants of a word
Plug 'tpope/vim-abolish'

" Directory viewer for Vim
Plug 'justinmk/vim-dirvish'
Plug 'kristijanhusak/vim-dirvish-git'

" Changes Vim working directory to project root
Plug 'airblade/vim-rooter'

" A Vim plugin that manages your tag files
" Plug 'ludovicchabant/vim-gutentags'

" The fancy start screen for Vim
Plug 'mhinz/vim-startify'

" Most Recently Used (MRU) Vim plugin
Plug 'yegappan/mru'

" -- EDITING -------------------------------------------------------------------

" Only show relative numbers in the currently active window
Plug 'vim-scripts/RelativeNumberCurrentWindow'

" True Sublime Text style multiple selections for Vim
Plug 'terryma/vim-multiple-cursors'

" Enable repeating supported plugin maps with '.'
Plug 'tpope/vim-repeat'

" Comment stuff out
Plug 'tpope/vim-commentary'

" Quoting/parenthesizing made simple
Plug 'tpope/vim-surround'

" Insert or delete brackets, parens, quotes in pair
Plug 'jiangmiao/auto-pairs'

" Functions and mappings to close open HTML/XML tags
" Plug 'docunext/closetag.vim'

" Highlight, navigate, and operate on sets of matching text
Plug 'andymass/vim-matchup'

" Make the yanked region apparent!
Plug 'machakann/vim-highlightedyank'

" Display indention levels with thin vertical lines
Plug 'Yggdroot/IndentLine', { 'on': 'IndentLinesToggle' }

" A different approach to code highlighting
Plug 'thiagoalessio/rainbow_levels.vim'

" Undo history visualizer for Vim
Plug 'mbbill/undotree'

" A simple, easy-to-use Vim alignment plugin
Plug 'junegunn/vim-easy-align'

" -- MOVEMENT ------------------------------------------------------------------

" The missing motion for Vim
Plug 'justinmk/vim-sneak'

" Extended f, F, t and T key mappings for Vim
Plug 'rhysd/clever-f.vim'

" Vim plugin that provides additional text objects
Plug 'wellle/targets.vim'

" Smooth scrolling for Vim done right
Plug 'psliwka/vim-smoothie'

" -- COMPLETION ----------------------------------------------------------------

" Intellisense engine for Vim8 & Neovim
Plug 'neoclide/coc.nvim', { 'branch': 'release' }

" -- LINTING -------------------------------------------------------------------

" Asynchronous Lint Engine
Plug 'w0rp/ale'

" ALE indicator for the lightline vim plugin
Plug 'maximbaz/lightline-ale'

" -- SEARCH --------------------------------------------------------------------

" Start a * or # search from a visual block
Plug 'nelstrom/vim-visual-star-search'

" Highlights the current search match
Plug 'PeterRincker/vim-searchlight'

" Helps you win at grep
Plug 'mhinz/vim-grepper', { 'on': ['Grepper', '<plug>(GrepperOperator)'] }

" -- SNIPPETS ------------------------------------------------------------------

" Emmet for vim
Plug 'mattn/emmet-vim'

" -- GIT -----------------------------------------------------------------------

" A Git wrapper so awesome, it should be illegal
Plug 'tpope/vim-fugitive'

" Show Git diff in the gutter and stages/undoes hunks
Plug 'airblade/vim-gitgutter'

" A Vim plugin for more pleasant editing on commit messages
Plug 'rhysd/committia.vim'

" A git commit browser in Vim
Plug 'junegunn/gv.vim'

" -- THEME / INTERFACE ---------------------------------------------------------

" Optimized Solarized colorschemes
Plug 'lifepillar/vim-solarized8'

" A light and configurable statusline/tabline plugin for Vim
Plug 'itchyny/lightline.vim'

" -- FILETYPES -----------------------------------------------------------------

" A collection of language packs for Vim
Plug 'sheerun/vim-polyglot'

" Jinja2 syntax file language support
Plug 'Glench/Vim-Jinja2-Syntax'

" Extra syntax support for CSS3
Plug 'hail2u/vim-css3-syntax', { 'for': ['css', 'scss', 'sass', 'less'] }

" Preview CSS colors in source code
Plug 'ap/vim-css-color', { 'for': ['css', 'scss', 'sass', 'less'] }

" Syntax support for JavaScript libraries
Plug 'othree/javascript-libraries-syntax.vim', { 'for': ['javascript'] }

" Generate phpDocumentor documentation blocks for PHP code
Plug 'Rican7/php-doc-modded', { 'for': ['php'] }

" Distraction-free writing in Vim
Plug 'junegunn/goyo.vim'

" -- TMUX ----------------------------------------------------------------------

" vim-tmux-navigator - Seamless navigation between tmux panes and vim splits
Plug 'christoomey/vim-tmux-navigator', Cond(exists('$TMUX'))

" vim-tmux-focus-events - Make terminal vim and tmux work better together
Plug 'tmux-plugins/vim-tmux-focus-events', Cond(exists('$TMUX'))

" -- MISC ----------------------------------------------------------------------

" Automatically rename closing HTML/XML tags
" Plug 'AndrewRadev/tagalong.vim'

" Plug 'chaoren/vim-wordmotion'

" Games designed to make you better at Vim
Plug 'ThePrimeagen/vim-be-good'

call plug#end()

" ==============================================================================
" GENERAL
" ==============================================================================

" Enable truecolor and italics for tmux
if (has("termguicolors"))
  let &t_8f="\<Esc>[38;2;%lu;%lu;%lum"
  let &t_8b="\<Esc>[48;2;%lu;%lu;%lum"
  set termguicolors
endif

if has("autocmd")
    filetype plugin indent on
    "           │     │    └──── Enable file type detection
    "           │     └───────── Enable loading of indent file
    "           └─────────────── Enable loading of plugin files
endif

set encoding=utf-8              " ┐
set fileencoding=utf-8          " │ Set encoding to utf-8
set termencoding=utf-8          " ┘

set langmenu=en_US              " ┐
let $LANG='en_US'               " │ Set language to
source $VIMRUNTIME/delmenu.vim  " │ English US
source $VIMRUNTIME/menu.vim     " ┘

" Jump to last edit position on opening file
if has("autocmd")
  " https://stackoverflow.com/questions/31449496/vim-ignore-specifc-file-in-autocommand
  au BufReadPost * if expand('%:p') !~# '\m/\.git/' && line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
endif

" ==============================================================================
" OPTIONS
" ==============================================================================

let mapleader="\<Space>"        " Remap Leader to <Space>

set nocompatible                " Use Vim features, not Vi
set fileformats=unix,dos,mac    " Use Unix as the standard file type

set mouse=a                     " Enable mouse
set mousehide                   " Hide the mouse cursor while typing

set backspace=eol,start,indent  " Configure backspace so it acts as it should act
set whichwrap+=<,>,h,l          " Allow backspace and cursor keys to cross line boundaries

set showcmd                     " Show commands in status line
set noshowmode                  " Hide modes from the statusline

set ruler                       " Show current line and column position in file
set number                      " Show current line in the gutter
set relativenumber              " Display relative line numbers
set cursorline                  " Highlight current line

set lazyredraw                  " Don't redraw while executing macros
set t_ut=                       " Improve screen clearing by using the background color
set ttyfast                     " Faster redrawing

set shortmess=atOI              " No help Uganda information
set title                       " Show file title in terminal tab
set fillchars+=vert:│           " Change vertical split character to │

set diffopt+=vertical           " Prefer vertical orientation for diffs

set clipboard=unnamed           " ┐
if has("unnamedplus")           " │ Use the system clipboard
  set clipboard+=unnamedplus    " │ as the default register
endif                           " ┘

" ==============================================================================
" COLORS
" ==============================================================================

set termguicolors
set background=dark

colorscheme solarized8_flat

" Italicised comments and attributes
highlight htmlArg gui=italic
highlight htmlArg cterm=italic
highlight Comment gui=italic
highlight Comment cterm=italic
highlight jsxAttrib gui=italic
highlight jsxAttrib cterm=italic

" ==============================================================================
" FILETYPES
" ==============================================================================

" Quickfix
if has("autocmd")
  autocmd FileType qf setlocal norelativenumber colorcolumn=
endif

" Gitcommit
" Force the cursor onto a new line after 72 characters and color the 51st colomn (for titles)
if has("autocmd")
  autocmd FileType gitcommit set textwidth=72 colorcolumn+=51
endif

" JavaScript
if has("autocmd")
  autocmd BufNewFile,BufRead *.ts,*.snap,*.es6,*.tsx setlocal filetype=javascript.jsx
endif

" JSON
if has("autocmd")
  autocmd BufNewFile,BufRead *stylelintrc,*eslintrc,*babelrc,*prettierrc setlocal syntax=json
endif

" Markdown
" let g:vim_markdown_conceal = 0
if has("autocmd")
  autocmd BufNewFile,BufFilePre,BufRead *.md,*.txt set filetype=markdown tw=80 fo+=t colorcolumn=80
endif

" Vue
let g:vue_disable_pre_processors=1
if has("autocmd")
  autocmd FileType vue syntax sync fromstart
  autocmd BufReadPre *.vue let b:javascript_lib_use_vue=1
  autocmd BufRead,BufNewFile *.vue setlocal filetype=vue.html.javascript.css.less.pug
endif

" ==============================================================================
" UI
" ==============================================================================

" Turn on the WiLd menu
set wildmenu

" Autocomplete as much as you can
set wildmode=longest:list,full

" Don’t offer to open certain files/directories
set wildignore+=*/.git/*,*/.hg/*,*/.svn/*        " Version control
set wildignore+=*.bmp,*.gif,*.ico,*.jpg,*.png    " Binary images
set wildignore+=*.o,*.obj,*.exe,*.dll,*.manifest " Compiled object files
set wildignore+=*.spl                            " Compiled spelling word lists
set wildignore+=*.sw?                            " Vim swap files
set wildignore+=*.DS_Store                       " OSX bullshit
set wildignore+=*.pdf,*.psd
set wildignore+=*.map,*.min.css
set wildignore+=node_modules/*,bower_components/*

" ==============================================================================
" FILES, BACKUPS AND UNDO
" ==============================================================================

set autoread                    " Reload files modified outside of Vim
set autowrite                   " Automatically write when leaving a modified buffer

set nobackup                    " ┐
set noswapfile                  " │ <3 Git
set nowritebackup               " ┘

set undodir=~/.vim/undo_files// " ┐ Permanent
set undofile                    " ┘ undo

" set hidden                    " Allow buffer switching without saving

" ==============================================================================
" ABBREVIATIONS AND AUTO-COMPLETIONS
" ==============================================================================

" lipsum<Tab> drops some Lorem ipsum text into the document
iab lipsum Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Vestibulum tortor quam, feugiat vitae, ultricies eget, tempor sit amet, ante. Donec eu libero sit amet quam egestas semper. Aenean ultricies mi vitae est. Mauris placerat eleifend leo.

" Automatically add `rel="noopener"` to `target="_blank"`
" https://www.pixelstech.net/article/1537002042-The-danger-of-target=_blank-and-opener
iab target="_blank" target="_blank" rel="noopener noreferrer nofollow"

" `todo` will be capitalized
iab todo TODO

" ==============================================================================

set colorcolumn=81,82           " Limit line-length to 80 columns
                                " by highlighting col 81 and 82

set list
set listchars=tab:▸\            " ┐
set listchars+=trail:·          " │
" set listchars+=eol:¬          " │ Use custom symbols to
set listchars+=extends:❯        " │ represent invisible characters
set listchars+=precedes:❮       " │
set listchars+=nbsp:_           " │
set showbreak=↪                 " ┘

set scrolloff=5                " Minumum lines to keep above and below
                               " from the cursor
set sidescroll=1               " Scroll sideways a character at a time,
                               " rather than a screen at a time
set sidescrolloff=5            " Minumum lines to keep left and right from the cursor

set report=0                   " Always report changed lines

set splitright                 " Open new vsplit windows to the right of the current one
set splitbelow                 " Open new split windows to the bottom of the current one

set noerrorbells               " ┐
set novisualbell               " │ No annoying sound
set t_vb=                      " │ on errors
set tm=500                     " ┘

au VimResized * :wincmd =      " Resize splits when the window is resized

set magic                      " For regular expressions turn magic on

set showmatch                  " Show matching brackets when text indicator
                               " is over them

set nrformats-=octal           " Interpret numbers with leading zeroes as
                               " decimal, not octal
set iskeyword+=-               " Makes foo-bar considered one word

set display=lastline           " Show as much as possible of the last line

set nojoinspaces               " No extra spaces when joining lines

if has("nvim")                 " ┐
    set inccommand=nosplit     " │ Live preview the :substitute command
endif                          " ┘

set gdefault                   " Set flag 'g' by default with ":substitute"
                               " commands

set spelllang=en,nl            " Set spelling language

" ``<Leader>+ss` -- Toggle spell checking
" `]s / [s`      -- Move to misspelled words
" `z=`           -- Autocorrect words
map <Leader>ss :setlocal spell!<CR>

" ==============================================================================
" SEARCH
" ==============================================================================

set ignorecase                 " Case insensitive search
set smartcase                  " ... except if we input a capital letter
set hlsearch                   " Highlight search terms
set hlsearch                   " Find as you type search

" `<Leader>+n` -- Disable highlight
nmap <silent> <Leader>n :silent :nohlsearch<CR>

" Don't jump directly to the next or previous result
nnoremap * *<C-o>
nnoremap # #<C-o>

" ==============================================================================
" TABS, SPACES, INDENTS AND WRAPPING
" ==============================================================================

set wrap                       " Wrap lines
set autoindent                 " Indent at the same level of the previous line
set expandtab                  " Use spaces instead of tabs
set smarttab                   " Smart tab
set smartindent                " Automatically indent lines after opening brackets

set softtabstop=2              " ┐
set shiftwidth=2               " │ 1 tab == 2 spaces
set tabstop=2                  " ┘

" ==============================================================================
" KEYBOARD SHORTCUTS
" ==============================================================================

" Remap : to ; to strip off two full keystrokes from almost every Vim command
nnoremap ; :

" `<Tab>` -- Jump between various pairs of characters
map <Tab> %

" `Q` -- Format the current paragraph (or selection)
nmap Q gqap
vmap Q gq

" `<Leader>+Plus(+) / <Leader>+Minus(-)` -- Resize splits
" nnoremap <silent> <Leader>+ :exe "vertical resize +5"<CR>
" nnoremap <silent> <Leader>- :exe "vertical resize -5"<CR>
nnoremap <silent> <Leader>+ :vertical resize +5<CR>
nnoremap <silent> <Leader>- :vertical resize -5<CR>

" Move between open buffers
" nnoremap <Left> :bp<CR>
" nnoremap <Right> :bn<CR>

" Vim-like window navigation
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

" No arrow keys -- Force yourself to use the home row
" nnoremap <Up> <nop>
" nnoremap <Down> <nop>
" inoremap <Up> <nop>
" inoremap <Down> <nop>
" inoremap <Left> <nop>
" inoremap <Right> <nop>

" `> (forwards) / < (backwards)` -- Shift selection in Visual mode
vnoremap > >gv
vnoremap < <gv

" Treat long lines as break lines
nmap j gj
nmap k gk
vmap j gj
vmap k gk

" `<Leader>+q` -- Close the current window
nnoremap <Leader>q :q<CR>

" `Ctrl+q` -- Close the current window
nnoremap <C-q> :q<CR>
vnoremap <C-q> :q<CR>

" `<Leader>+qq` -- Close the QuickFix window
nnoremap <Leader>qq :ccl<CR>

" `<Leader>+qp` -- Close the Preview window
nnoremap <Leader>qp :pc<CR>

" `<Leader>+ql` -- Close the Location List window
nnoremap <Leader>ql :lcl<CR>

" `<Leader>+qb` -- Close the current buffer
nnoremap <Leader>qb :bdel<CR>

" `<Leader>+o` -- Close all buffers except for the current one
nnoremap <Leader>o :only<CR>

" `<Leader>+<Leader> / Ctrl+e` -- Edit last (most recent) file
nnoremap <Leader><Leader> <c-^>
nmap <C-e> :e#<CR>

" `<Leader>+e[s,v]` -- Edit file, starting in same directory as current file
nnoremap <Leader>e :edit <C-R>=expand('%:p:h') . '/'<CR>
nnoremap <Leader>es :split <C-R>=expand('%:p:h') . '/'<CR>
nnoremap <Leader>ev :vsplit <C-R>=expand('%:p:h') . '/'<CR>

" `<Leader>+cd` -- Switch CWD to the directory of the open buffer
map <Leader>cd :cd %:p:h<CR>:pwd<CR>

" `<Leader>+P` -- Show the path of the current file
nnoremap <Leader>P :echo expand('%')<CR>

" `Ctrl+c / Ctrl+j` -- Map to Escape
inoremap <C-j> <Esc>
vnoremap <C-j> <Esc>
inoremap <C-c> <Esc>
vnoremap <C-c> <Esc>

" `jj` -- Map to Escape
inoremap jj <Esc>

" `Shift+Up/Down` -- Move current line(s) up or down
nnoremap <S-Down> :m .+1<CR>==
nnoremap <S-Up> :m .-2<CR>==

inoremap <S-Down> <Esc>:m .+1<CR>==gi
inoremap <S-Up> <Esc>:m .-2<CR>==gi

vnoremap <S-Down> :m '>+1<CR>gv=gv
vnoremap <S-Up> :m '<-2<CR>gv=gv
vnoremap <S-j> :m '>+1<CR>gv=gv
vnoremap <S-k> :m '<-2<CR>gv=gv

" `G` -- Skip to bottom of file and place line in middle of the screen
nnoremap G :norm! Gzz<CR>

" `H` -- Go to the beginning of a line
noremap H ^

" `L` -- Go to the end of a line
noremap L $

" `Y` -- Yank characters under the cursor until the end This makes `Y` behave
" like `C` and `D`
nnoremap Y y$

" `vv` -- Highlight just the text (i.e. no indents) in a line
nnoremap vv ^vg_

" `n / N` -- Bring next/previous search result in middle of the screen
" nnoremap n nzz
" nnoremap N Nzz

" `S` -- Split line (sister to [J]oin lines)
nnoremap S i<CR><Esc>^mwgk:silent! s/\v +$//<CR>:noh<CR>`w

" `J` -- Keep cursor in place when joining lines
nnoremap J mzJ`z

" `<return>` -- Insert a break at the cursor and enter insert mode
" nnoremap <CR> i<CR><ESC>I

" `<Leader>+rt` -- Convert tabs to spaces
nnoremap <Leader>rt :retab<CR>

" `<Leader>+tw` -- Remove trailing whitespace
nnoremap <Leader>tw :%s/ \+$//<CR>

" `<Leader>+d` -- Delete without yanking
nnoremap <Leader>d "_d
vnoremap <Leader>d "_d

" `<Leader>+p` -- Replace currently selected text with default register
" without yanking it
vnoremap <Leader>p "_dP

" `<Leader>+s` -- Find & Replace in the Current File
nnoremap <Leader>s :let @s='\<'.expand('<cword>').'\>'<CR>:%s/<C-r>s//<Left>
xnoremap <Leader>s "sy:%s/<C-r>s//<Left>

" `<Leader>+S` -- Project-wide Find & Replace
nnoremap <Leader>S
  \ :let @s='\<'.expand('<cword>').'\>'<CR>
  \ :Grepper -cword -noprompt<CR>
  \ :cfdo %s/<C-r>s// \| update
  \ <Left><Left><Left><Left><Left><Left><Left><Left><Left><Left><Left>
xmap <Leader>S
  \ "sy \|
  \ :GrepperRg <C-r>s<CR>
  \ :cfdo %s/<C-r>s// \| update
  \ <Left><Left><Left><Left><Left><Left><Left><Left><Left><Left><Left>

" ==============================================================================
" PLUGIN SETTINGS
" ==============================================================================

let plugin_settings='~/.config/vim/plugin_settings'
for fpath in split(globpath(plugin_settings, '*.vim'), '\n')
  exe 'source' fpath
endfor

" ==============================================================================
" HOST-SPECIFIC SETTINGS
" ==============================================================================

if filereadable(expand('~/.vimrc.local'))
  source ~/.vimrc.local
endif
